<?xml version="1.0" encoding="UTF-8" ?>
<schema name="ajaxsolr" version="1.4">
    <types>
		<!-- field type definitions. The "name" attribute is just a label to be
			used by field definitions. The "class" attribute and any other attributes
			determine the real behavior of the fieldType. Class names starting with "solr"
			refer to java classes in the org.apache.solr.analysis package. -->

		<!-- The StrField type is not analyzed, but indexed/stored verbatim. -
			StrField and TextField support an optional compressThreshold which limits
			compression (if enabled in the derived fields) to values which exceed a certain
			size (in characters). -->
        <fieldType name="string" class="solr.StrField"
                   sortMissingLast="true" omitNorms="true" />

		<!-- boolean type: "true" or "false" -->
        <fieldType name="boolean" class="solr.BoolField"
                   sortMissingLast="true" omitNorms="true" />

		<!-- The optional sortMissingLast and sortMissingFirst attributes are currently
			supported on types that are sorted internally as strings. - If sortMissingLast="true",
			then a sort on this field will cause documents without the field to come
			after documents with the field, regardless of the requested sort order (asc
			or desc). - If sortMissingFirst="true", then a sort on this field will cause
			documents without the field to come before documents with the field, regardless
			of the requested sort order. - If sortMissingLast="false" and sortMissingFirst="false"
			(the default), then default lucene sorting will be used which places docs
			without the field first in an ascending sort and last in a descending sort. -->

		<!-- numeric field types that store and index the text value verbatim (and
			hence don't support range queries, since the lexicographic ordering isn't
			equal to the numeric ordering) -->
        <fieldType name="integer" class="solr.IntField" omitNorms="true" />
        <fieldType name="long" class="solr.LongField" omitNorms="true" />
        <fieldType name="float" class="solr.FloatField" omitNorms="true" />
        <fieldType name="double" class="solr.DoubleField" omitNorms="true" />


		<!-- Numeric field types that manipulate the value into a string value
			that isn't human-readable in its internal form, but with a lexicographic
			ordering the same as the numeric ordering, so that range queries work correctly. -->
        <fieldType name="sint" class="solr.SortableIntField"
                   sortMissingLast="true" omitNorms="true" />
        <fieldType name="slong" class="solr.SortableLongField"
                   sortMissingLast="true" omitNorms="true" />
        <fieldType name="sfloat" class="solr.SortableFloatField"
                   sortMissingLast="true" omitNorms="true" />
        <fieldType name="sdouble" class="solr.SortableDoubleField"
                   sortMissingLast="true" omitNorms="true" />

		<!-- The format for this date field is of the form 1995-12-31T23:59:59Z,
			and is a more restricted form of the canonical representation of dateTime
			http://www.w3.org/TR/xmlschema-2/#dateTime The trailing "Z" designates UTC
			time and is mandatory. Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
			All other components are mandatory. Expressions can also be used to denote
			calculations that should be performed relative to "NOW" to determine the
			value, ie... NOW/HOUR ... Round to the start of the current hour NOW-1DAY
			... Exactly 1 day prior to now NOW/DAY+6MONTHS+3DAYS ... 6 months and 3 days
			in the future from the start of the current day Consult the DateField javadocs
			for more information. -->
        <fieldType name="date" class="solr.DateField"
                   sortMissingLast="true" omitNorms="true" />

		<!-- The "RandomSortField" is not used to store or search any data. You
			can declare fields of this type it in your schema to generate psuedo-random
			orderings of your docs for sorting purposes. The ordering is generated based
			on the field name and the version of the index, As long as the index version
			remains unchanged, and the same field name is reused, the ordering of the
			docs will be consistent. If you want differend psuedo-random orderings of
			documents, for the same version of the index, use a dynamicField and change
			the name -->
        <fieldType name="random" class="solr.RandomSortField"
                   indexed="true" />

		<!-- solr.TextField allows the specification of custom text analyzers specified
			as a tokenizer and a list of token filters. Different analyzers may be specified
			for indexing and querying. The optional positionIncrementGap puts space between
			multiple fields of this type on the same document, with the purpose of preventing
			false phrase matching across fields. For more info on customizing your analyzer
			chain, please see http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters -->

		<!-- One can also specify an existing Analyzer class that has a default
			constructor via the class attribute on the analyzer element <fieldType name="text_greek"
			class="solr.TextField"> <analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/>
			</fieldType> -->

		<!-- A text field that only splits on whitespace for exact matching of
			words -->
        <fieldType name="text_ws" class="solr.TextField"
                   positionIncrementGap="100">
            <analyzer>
                <tokenizer class="solr.WhitespaceTokenizerFactory" />
            </analyzer>
        </fieldType>
		<!-- New type 2-17-12 -->
        <fieldType name="text_w" class="solr.TextField"
                   positionIncrementGap="100">
            <analyzer>
                <tokenizer class="solr.WhitespaceTokenizerFactory" />
                <filter class="solr.LowerCaseFilterFactory" />
            </analyzer>
        </fieldType>


		<!-- text_ fg: Case Insensitive, fine grain (fg) strategy recommended to
			be used for fields holding one word, for example idNct or idRoprS. Allows
			for partial searches of a word, for example NCT00358943 can be found by entering
			the upper case letter N or the lower case letter n in the Solr query. This
			will take a word such as “NCT00358943” and index smaller words (or grams)
			“NCT0”, “NCT”, “NC”, “n”, and so on. Entering "00035" in the query would
			also find “NCT00358943” Please Note: minGrams may be increased (for example
			to 2)to decrease index size and require the user to enter at least 2 letters/numerics. -->
        <fieldType name="text_fg" class="solr.TextField" omitNorms="false">
            <analyzer type="index">
                <tokenizer class="solr.StandardTokenizerFactory" />
                <filter class="solr.StandardFilterFactory" />
                <filter class="solr.LowerCaseFilterFactory" />
                <filter class="solr.NGramFilterFactory" minGramSize="1"
                        maxGramSize="15" />
            </analyzer>
            <analyzer type="query">
                <tokenizer class="solr.StandardTokenizerFactory" />
                <filter class="solr.StandardFilterFactory" />
                <filter class="solr.LowerCaseFilterFactory" />
            </analyzer>
        </fieldType>


		<!-- A text field that uses WordDelimiterFilter to enable splitting and
			matching of words on case-change, alpha numeric boundaries, and non-alphanumeric
			chars, so that a query of "wifi" or "wi fi" could match a document containing
			"Wi-Fi". Synonyms and stopwords are customized by external files, and stemming
			is enabled. Duplicate tokens at the same position (which may result from
			Stemmed Synonyms or WordDelim parts) are removed. -->
        <fieldType name="text" class="solr.TextField"
                   positionIncrementGap="100">
            <analyzer type="index">
                <tokenizer class="solr.WhitespaceTokenizerFactory" />
				<!-- Put back in 2-14-2012 in this example, we will only use synonyms
					at query time -->
                <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt"
                        ignoreCase="true" expand="true" />

				<!-- Case insensitive stop word removal. enablePositionIncrements=true
					ensures that a 'gap' is left to allow for accurate phrase queries. -->
                <filter class="solr.StopFilterFactory" ignoreCase="true"
                        words="stopwords.txt" enablePositionIncrements="true" />
                <filter class="solr.WordDelimiterFilterFactory"
                        generateWordParts="1" generateNumberParts="1" catenateWords="1"
                        catenateNumbers="1" catenateAll="0" splitOnCaseChange="1" />
                <filter class="solr.LowerCaseFilterFactory" />
                <filter class="solr.SnowballPorterFilterFactory" protected="protwords.txt"
                        language="English" />
                <filter class="solr.RemoveDuplicatesTokenFilterFactory" />
            </analyzer>
            <analyzer type="query">
                <tokenizer class="solr.WhitespaceTokenizerFactory" />
                <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt"
                        ignoreCase="true" expand="true" />
                <filter class="solr.StopFilterFactory" ignoreCase="true"
                        words="stopwords.txt" />
                <filter class="solr.WordDelimiterFilterFactory"
                        generateWordParts="1" generateNumberParts="1" catenateWords="0"
                        catenateNumbers="0" catenateAll="0" splitOnCaseChange="1" />
                <filter class="solr.LowerCaseFilterFactory" />
                <filter class="solr.SnowballPorterFilterFactory" protected="protwords.txt"
                        language="English" />
                <filter class="solr.RemoveDuplicatesTokenFilterFactory" />
            </analyzer>
        </fieldType>

		<!-- A text field with defaults appropriate for English, plus aggressive
			word-splitting and autophrase features enabled. This field is just like text_en,
			except it adds WordDelimiterFilter to enable splitting and matching of words
			on case-change, alpha numeric boundaries, and non-alphanumeric chars. This
			means certain compound word cases will work, for example query "wi fi" will
			match document "WiFi" or "wi-fi". However, other cases will still not match,
			for example if the query is "wifi" and the document is "wi fi" or if the
			query is "wi-fi" and the document is "wifi". -->
        <fieldType name="text_en_splitting" class="solr.TextField"
                   positionIncrementGap="100" autoGeneratePhraseQueries="true">
            <analyzer type="index">
                <tokenizer class="solr.WhitespaceTokenizerFactory" />
				<!-- <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt"
					ignoreCase="true" expand="false"/> -->
				<!-- Case insensitive stop word removal. add enablePositionIncrements=true
					in both the index and query analyzers to leave a 'gap' for more accurate
					phrase queries. -->
                <filter class="solr.StopFilterFactory" ignoreCase="true"
                        words="stopwords_en.txt" enablePositionIncrements="true" />
                <filter class="solr.WordDelimiterFilterFactory"
                        generateWordParts="1" generateNumberParts="1" catenateWords="1"
                        catenateNumbers="1" catenateAll="0" splitOnCaseChange="1" />
                <filter class="solr.LowerCaseFilterFactory" />
                <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt" />
                <filter class="solr.PorterStemFilterFactory" />
            </analyzer>
            <analyzer type="query">
                <tokenizer class="solr.WhitespaceTokenizerFactory" />
                <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt"
                        ignoreCase="true" expand="true" />
                <filter class="solr.StopFilterFactory" ignoreCase="true"
                        words="stopwords_en.txt" enablePositionIncrements="true" />
                <filter class="solr.WordDelimiterFilterFactory"
                        generateWordParts="1" generateNumberParts="1" catenateWords="0"
                        catenateNumbers="0" catenateAll="0" splitOnCaseChange="1" />
                <filter class="solr.LowerCaseFilterFactory" />
                <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt" />
                <filter class="solr.PorterStemFilterFactory" />
            </analyzer>
        </fieldType>

		<!-- For indexing against MeSH concepts that have been extracted to a synonym
			list. -->
        <fieldType name="mesh_text" class="solr.TextField"
                   positionIncrementGap="100">
            <analyzer type = "index">
                <tokenizer class="solr.WhitespaceTokenizerFactory" />
                <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt,synonyms.txt"
                        ignoreCase="true" expand="true" />
                <filter class="solr.StopFilterFactory" ignoreCase="true"
                        words="stopwords_en.txt" enablePositionIncrements="true" />
                <filter class="solr.LowerCaseFilterFactory" />
            </analyzer>
            <analyzer type = "query">
                <tokenizer class="solr.WhitespaceTokenizerFactory" />
                <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt,synonyms.txt"
                        ignoreCase="true" expand="false" />
                <filter class="solr.StopFilterFactory" ignoreCase="true"
                        words="stopwords_en.txt" enablePositionIncrements="true" />
                <filter class="solr.LowerCaseFilterFactory" />
            </analyzer>
        </fieldType>

		<!-- For typing ahead -->

        <fieldType name="type_ahead" class="solr.TextField"
                   positionIncrementGap="100">
            <analyzer>
                <tokenizer class="solr.WhitespaceTokenizerFactory" />
                <filter class="solr.WordDelimiterFilterFactory"
                        generateWordParts="1" generateNumberParts="1" catenateWords="0"
                        catenateNumbers="0" catenateAll="0" splitOnCaseChange="0" />
                <filter class="solr.LowerCaseFilterFactory" />
                <filter class="solr.StopFilterFactory" ignoreCase="true"
                        words="stopwords_en.txt" enablePositionIncrements="true" />
            </analyzer>
        </fieldType>

		<!-- Type created for  contactOrg and regTitle on structured search page -->
        <fieldType name="structured_text" class="solr.TextField"
                   positionIncrementGap="100">
            <analyzer>
                <tokenizer class="solr.WhitespaceTokenizerFactory" />
                <filter class="solr.StopFilterFactory" ignoreCase="true"
                        words="stopwords_en.txt" enablePositionIncrements="true" />
                <filter class="solr.WordDelimiterFilterFactory"
                        generateWordParts="1" generateNumberParts="1" catenateWords="0"
                        catenateNumbers="0" catenateAll="0" splitOnCaseChange="0" />
                <filter class="solr.LowerCaseFilterFactory" />
                <filter class="solr.PorterStemFilterFactory" />
            </analyzer>
        </fieldType>

		<!-- Less flexible matching, but less false matches. Probably not ideal
			for product names, but may be good for SKUs. Can insert dashes in the wrong
			place and still match. -->
        <fieldType name="textTight" class="solr.TextField"
                   positionIncrementGap="100">
            <analyzer>
                <tokenizer class="solr.WhitespaceTokenizerFactory" />
                <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt"
                        ignoreCase="true" expand="false" />
                <filter class="solr.StopFilterFactory" ignoreCase="true"
                        words="stopwords.txt" />
                <filter class="solr.WordDelimiterFilterFactory"
                        generateWordParts="0" generateNumberParts="0" catenateWords="1"
                        catenateNumbers="1" catenateAll="0" />
                <filter class="solr.LowerCaseFilterFactory" />
                <filter class="solr.SnowballPorterFilterFactory" protected="protwords.txt"
                        language="English" />
                <filter class="solr.RemoveDuplicatesTokenFilterFactory" />
            </analyzer>
        </fieldType>

		<!-- Setup simple analysis for spell checking -->
        <fieldType name="textSpell" class="solr.TextField"
                   positionIncrementGap="100">
            <analyzer>
                <tokenizer class="solr.StandardTokenizerFactory" />
                <filter class="solr.LowerCaseFilterFactory" />
                <filter class="solr.RemoveDuplicatesTokenFilterFactory" />
            </analyzer>
        </fieldType>

		<!-- This is an example of using the KeywordTokenizer along With various
			TokenFilterFactories to produce a sortable field that does not include some
			properties of the source text -->
        <fieldType name="alphaOnlySort" class="solr.TextField"
                   sortMissingLast="true" omitNorms="true">
            <analyzer>
				<!-- KeywordTokenizer does no actual tokenizing, so the entire input
					string is preserved as a single token -->
                <tokenizer class="solr.KeywordTokenizerFactory" />
				<!-- The LowerCase TokenFilter does what you expect, which can be when
					you want your sorting to be case insensitive -->
                <filter class="solr.LowerCaseFilterFactory" />
				<!-- The TrimFilter removes any leading or trailing whitespace -->
                <filter class="solr.TrimFilterFactory" />
				<!-- The PatternReplaceFilter gives you the flexibility to use Java Regular
					expression to replace any sequence of characters matching a pattern with
					an arbitrary replacement string, which may include back refrences to portions
					of the orriginal string matched by the pattern. See the Java Regular Expression
					documentation for more infomation on pattern and replacement string syntax.
					http://java.sun.com/j2se/1.5.0/docs/api/java/util/regex/package-summary.html -->
                <filter class="solr.PatternReplaceFilterFactory" pattern="([^a-z])"
                        replacement="" replace="all" />
            </analyzer>
        </fieldType>

		<!-- since fields of this type are by default not stored or indexed, any
			data added to them will be ignored outright -->
        <fieldtype name="ignored" stored="false" indexed="false"
                   class="solr.StrField" />

    </types>

    <fields>
        <field name="idRopr" type="string" indexed="true" stored="true" required="true" />
        <field name="idNct" type="text_fg" indexed="true" stored="true" termPositions="true" />
        <field name="idPrs" type="text_fg" indexed="true" stored="true" />
        <field name="dateEntry" type="date" indexed="true" stored="true" />
        <field name="dateUpdate" type="date" indexed="true" stored="true" />
        <field name="regTitle" type="structured_text" indexed="true"
               stored="true" omitNorms="true" termVectors="true" />
        <field name="regVersion" type="string" indexed="true" stored="true"
               termPositions="true" />
        <field name="briefDesc" type="text" indexed="true" stored="true"
               termPositions="true" />
        <field name="longDesc" type="text" indexed="true" stored="true"
               termPositions="true" />
        <field name="Reg" type="string" indexed="true" stored="true"
               termPositions="true" />
        <field name="regGeogText" type="string" indexed="true" stored="true"
               termPositions="true" />
        <field name="regLocation" type="string" indexed="true" stored="true"
               termPositions="true" />
        <field name="clssfctnDesc" type="string" indexed="true" stored="true"
               multiValued="true" termPositions="true" />
        <field name="Cls" type="string" indexed="true" stored="true"
               multiValued="true" termPositions="true" />
        <field name="othClssfctn" type="string" indexed="true" stored="true"
               termPositions="true" />
        <field name="purposeDesc" type="string" indexed="true" stored="true"
               multiValued="true" termPositions="true" />
        <field name="Pur" type="string" indexed="true" stored="true"
               multiValued="true" termPositions="true" />
        <field name="othPurpose" type="string" indexed="true" stored="true"
               termPositions="true" />
        <field name="interestedContact" type="string" indexed="true"
               stored="true" termPositions="true" />
        <field name="reasonDesc" type="string" indexed="true" stored="true"
               multiValued="true" termPositions="true" />
        <field name="RC" type="string" indexed="true" stored="true"
               multiValued="true" termPositions="true" />
        <field name="othContact" type="string" indexed="true" stored="true"
               termPositions="true" />
        <field name="contactOrg" type="structured_text" indexed="true"
               stored="true" termPositions="true" />
        <field name="contactFName" type="string" indexed="true" stored="true"
               termPositions="true" />
        <field name="contactLName" type="string" indexed="true" stored="true"
               termPositions="true" />
        <field name="contactTitle" type="string" indexed="true" stored="true"
               termPositions="true" />
		<!-- <field name="contactEmail" type="string" indexed="true" stored="true"
			termPositions="true" /> <field name="contactPhone" type="string" indexed="true"
			stored="true" termPositions="true" /> <field name="contactUrl" type="string"
			indexed="true" stored="true" termPositions="true" /> -->
        <field name="omfConditionDisplayLabel" type="string" indexed="true"
               stored="true" multiValued="true" termPositions="true" />
        <field name="Cd" type="string" indexed="true" stored="true"
               multiValued="true" termPositions="true" />
        <field name="othCondition" type="string" indexed="true" stored="true"
               termPositions="true" />
        <field name="omfCategoryDisplayLabel" type="string" indexed="true"
               stored="true" multiValued="true" termPositions="true" />
        <field name="Ct" type="string" indexed="true" stored="true"
               multiValued="true" termPositions="true" />
        <field name="othCategory" type="string" indexed="true" stored="true"
               termPositions="true" />
        <field name="progAvailable" type="string" indexed="true" stored="true"
               termPositions="true" />
        <field name="progTitle" type="string" indexed="true" stored="true"
               multiValued="true" termPositions="true" />
        <field name="progSummary" type="string" indexed="true" stored="true"
               multiValued="true" termPositions="true" />
		<!-- <field name="progLink" type="string" indexed="true" stored="true"
			multiValued="true" termPositions="true" /> -->
		<!-- <field name="linkUrl" type="string" indexed="true" stored="true" multiValued="true"
			termPositions="true" /> -->
        <field name="linkDesc" type="string" indexed="true" stored="true"
               multiValued="true" />
        <field name="regReport" type="string" indexed="false" stored="true" />
        <field name="history" type="string" indexed="false" stored="true" />
        <field name="freeText" type="text_en_splitting" indexed="true"
               stored="true" multiValued="true" omitNorms="true" termVectors="true" />
        <field name="meshText" type="mesh_text" indexed="true" stored="false"
               multiValued="true" omitNorms="false" termVectors="true" />
        <field name="typeAhead" type="type_ahead" indexed="true" stored="true"
               multiValued="true" omitNorms="true" termVectors="true" />
        <field name="idRoprS" type="text_fg" indexed="true" stored="false"
               omitNorms="false" termVectors="true" />
        <field name="contactOrgTypeAhead" type="type_ahead" indexed="true"
               stored="true" termPositions="true" />
        <field name="archived" type="string" indexed="true" stored="true"
               termPositions="true" />
        <field name="notificationNeeded" type="string" indexed="true" stored="true"
               termPositions="true" />

    </fields>


    <copyField source="regTitle" dest="freeText" />
    <copyField source="regVersion" dest="freeText" />
    <copyField source="briefDesc" dest="freeText" />
    <copyField source="longDesc" dest="freeText" />
    <copyField source="regGeogText" dest="freeText" />
    <copyField source="regLocation" dest="freeText" />
    <copyField source="clssfctnDesc" dest="freeText" />
    <copyField source="othClssfctn" dest="freeText" />
    <copyField source="purposeDesc" dest="freeText" />
    <copyField source="othPurpose" dest="freeText" />
    <copyField source="reasonDesc" dest="freeText" />
    <copyField source="othContact" dest="freeText" />
    <copyField source="contactOrg" dest="freeText" />
    <copyField source="contactFName" dest="freeText" />
    <copyField source="contactLName" dest="freeText" />
    <copyField source="contactTitle" dest="freeText" />
	<!-- <copyField source="contactEmail" dest="freeText" /> <copyField source="contactPhone"
		dest="freeText" /> <copyField source="contactUrl" dest="freeText" /> -->
    <copyField source="omfConditionDisplayLabel" dest="freeText" />
    <copyField source="othCondition" dest="freeText" />
    <copyField source="omfCategoryDisplayLabel" dest="freeText" />
    <copyField source="othCategory" dest="freeText" />
    <copyField source="progTitle" dest="freeText" />
    <copyField source="progSummary" dest="freeText" />
	<!-- <copyField source="progLink" dest="freeText" /> -->
	<!-- <copyField source="linkUrl" dest="freeText" /> -->
    <copyField source="linkDesc" dest="freeText" />
    <copyField source="idNct" dest="freeText" />
    <copyField source="idRopr" dest="freeText" />

    <copyField source="regTitle" dest="meshText" />
    <copyField source="briefDesc" dest="meshText" />
    <copyField source="longDesc" dest="meshText" />
    <copyField source="regGeogText" dest="meshText" />
    <copyField source="regLocation" dest="meshText" />
    <copyField source="clssfctnDesc" dest="meshText" />
    <copyField source="othClssfctn" dest="meshText" />
    <copyField source="purposeDesc" dest="meshText" />
    <copyField source="othPurpose" dest="meshText" />
    <copyField source="reasonDesc" dest="meshText" />
    <copyField source="othContact" dest="meshText" />
    <copyField source="contactOrg" dest="meshText" />
    <copyField source="omfConditionDisplayLabel" dest="meshText" />
    <copyField source="othCondition" dest="meshText" />
    <copyField source="omfCategoryDisplayLabel" dest="meshText" />
    <copyField source="othCategory" dest="meshText" />
    <copyField source="progTitle" dest="meshText" />
    <copyField source="progSummary" dest="meshText" />
    <copyField source="linkDesc" dest="meshText" />

    <copyField source="idRopr" dest="idRoprS" />
    <copyField source="contactOrg" dest="contactOrgTypeAhead" />

    <copyField source="regTitle" dest="typeAhead" />
    <copyField source="regVersion" dest="typeAhead" />
    <copyField source="briefDesc" dest="typeAhead" />
    <copyField source="longDesc" dest="typeAhead" />
    <copyField source="regGeogText" dest="typeAhead" />
    <copyField source="regLocation" dest="typeAhead" />
    <copyField source="clssfctnDesc" dest="typeAhead" />
    <copyField source="othClssfctn" dest="typeAhead" />
    <copyField source="purposeDesc" dest="typeAhead" />
    <copyField source="othPurpose" dest="typeAhead" />
    <copyField source="reasonDesc" dest="typeAhead" />
    <copyField source="othContact" dest="typeAhead" />
    <copyField source="contactOrg" dest="typeAhead" />
    <copyField source="contactFName" dest="typeAhead" />
    <copyField source="contactLName" dest="typeAhead" />
    <copyField source="contactTitle" dest="typeAhead" />
	<!-- <copyField source="contactEmail" dest="typeAhead" /> <copyField source="contactPhone"
		dest="typeAhead" /> <copyField source="contactUrl" dest="typeAhead" /> -->
    <copyField source="omfConditionDisplayLabel" dest="typeAhead" />
    <copyField source="othCondition" dest="typeAhead" />
    <copyField source="omfCategoryDisplayLabel" dest="typeAhead" />
    <copyField source="othCategory" dest="typeAhead" />
    <copyField source="progTitle" dest="typeAhead" />
    <copyField source="progSummary" dest="typeAhead" />
	<!-- <copyField source="progLink" dest="typeAhead" /> -->
	<!-- <copyField source="linkUrl" dest="typeAhead" /> -->
    <copyField source="linkDesc" dest="typeAhead" />
    <copyField source="idNct" dest="typeAhead" />
    <copyField source="idRopr" dest="typeAhead" />

    <uniqueKey>idRopr</uniqueKey>

    <defaultSearchField>freeText</defaultSearchField>

    <solrQueryParser defaultOperator="OR" />

</schema>